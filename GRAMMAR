expression            = pipe-expression / main-expression
main-expression       = complex-expression / logical-expression
complex-expression    = simple-expression / multi-select-list / multi-select-hash / comparator-expr
simple-expression     = identifier / sub-expression / index-expression / function-expression / current-node
current-node          = "@"
function-expression   = identifier "(" function-args ")"   ; TODO: account for no-arg functions
function-args         = expression / expression *("," expression)
pipe-expression       = main-expression 1*("|" main-expression)
sub-expression        = simple-expression "." sub-expression-rhs
sub-expression-rhs    = identifier / multi-select-list / multi-select-hash / function-expression
index-expression      = [simple-expression] "[" number "]"
multi-select-list     = "[" expression *("," expression) "]"
multi-select-hash     = "{" keyval-expr *("," keyval-expr) "}"
keyval-expr           = identifier ":" expression
comparator-expr       = complex-expression comparator complex-expression
comparator            = "<" / "<=" / "==" / "!=" / ">=" / ">"
logical-expression    = or-expression / and-expression / not-expression
or-expression         = or-clause 1*("||" or-clause)
or-clause             = complex-expression / and-expression / not-expression
and-expression        = and-clause 1*("&&" and-clause)
and-clause            = simple-expression / not-expression
identifier            = unquoted-string
not-expression        = "!" simple-expression
number                = ["-"] 1*digit
digit                 = "0" / "1" / "2" / "3" / "4" / "5" / "6" / "7" / "8" / "9"
unquoted-string       = (%x41-5A / %x61-7A / %x5F) *(  ; A-Za-z_
			 %x30-39  /  ; 0-9
			 %x41-5A /  ; A-Z
 			 %x5F    /  ; _
 			 %x61-7A)   ; a-z
