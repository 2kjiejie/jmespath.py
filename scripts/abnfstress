#!/usr/bin/env python
"""Uses abnfgen to stress test the grammar.

Make sure abnfgen is installed::

    brew install abnfgen # On Mac

"""
import os
import argparse
import subprocess
import jmespath
from jmespath import exceptions


GRAMMAR_FILENAME = os.path.join(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
    'GRAMMAR')


def stress(args):
    i = 0
    while i < args.num_iterations:
        output = subprocess.check_output(
            ['abnfgen'] + args.abnf_args + [args.grammar_file])
        output = output.decode('utf-8')
        try:
            jmespath.compile(output)
        # abnfgen can generate expressions that contain
        # unknown functions.  This is ok, because the
        # grammar doesn't enforce the known functions.
        except exceptions.UnknownFunctionError:
            pass
        except Exception as e:
            print(e)
            print(output)
            import pdb; pdb.set_trace()
        i += 1
        if i % 1000 == 0:
            print("num_expressions: %s" % i)


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('-g', '--grammar-file',
                        default=GRAMMAR_FILENAME,
                        help='The file containing the ABNF grammar '
                             'file.')
    parser.add_argument('-a', '--abnf-args',
                        default='',
                        type=str.split,
                        help='Additional arugments to pass to '
                             'abnfgen')
    parser.add_argument('-n', '--num-iterations',
                        default=float('inf'),
                        type=int,
                        help='The number of expressions to '
                             'test.  If this value is not '
                             'specified, abnfstress will '
                             'continue to generate and test '
                             'expressions until it is stopped.')
    args = parser.parse_args()
    stress(args)


if __name__ == '__main__':
    main()
